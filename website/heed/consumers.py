from channels.generic.websocket import AsyncWebsocketConsumer
import requests
import matplotlib.pyplot as plt
import numpy as np

# import opuslib

import random

# import json
import base64
import io
import urllib

# import time
# import asyncio

# can reference container via service name, notice: it is the port internally to the serving container
# which we are sending requests to. Shouldnt really be a post request, since we dont change the state of the application at all.
# but current application server is configured to be a post request
URL_KWS_SERIVCE = "http://serving:80/api/v1/predict"


plt_colours = ["b", "g", "r", "c", "m", "y"]


def plot(audio_bytes=None, c=random.sample(plt_colours, k=1)[0]):
    fig, ax = plt.subplots()
    x = np.linspace(0, 2 * np.pi, 1000)
    y = [np.sin(_x) for _x in x]
    ax.plot(x, y, "*", color=c)
    buf = io.BytesIO()
    fig.savefig(buf, format="png")
    buf.seek(0)
    string = base64.b64encode(buf.read())
    uri = urllib.parse.quote(string)
    # print("plot() CONSUMER: ", uri)
    return uri


# def iterate_plot():
#     for _ in range(10):
#         time.sleep(1)
#         t = loader.get_template("heed/index.html")
#         clr = random.sample(plt_colours, k=1)[0]
#         c = {"image_uri": plot(c=clr)}
#         yield t.render(c)


BLUE_PLOT_B64 = "iVBORw0KGgoAAAANSUhEUgAAAoAAAAHgCAYAAAA10dzkAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD%2BnaQAAQo9JREFUeJzt3X90FPW9//HXJiEbQLKBAvlxE4mGVqAiaIA0EtsquQTUIj22hYJFufw4UkExiJJ7FKxY8Vf9KkqlIhS8iqDeYoVeIxBEK0WQ0Fz5pVeshCAkoEhWogZM9vvHlq0rSXY2ye7M7Dwf5%2BxRNp8dPrvZ3Xnxnpn3x%2BXz%2BXwCAACAY8SZPQEAAABEFwEQAADAYQiAAAAADkMABAAAcBgCIAAAgMMQAAEAAByGAAgAAOAwBEAAAACHIQACAAA4DAEQAADAYQiAAAAADkMABAAAcBgCIAAAgMMQAAEAAByGAAgAAOAwBEAAAACHIQACAAA4DAEQAADAYQiAAAAADkMABAAAcBgCIAAAgMMQAAEAAByGAAgAAOAwBEAAAACHIQACAAA4DAEQAADAYQiAAAAADkMABAAAcBgCIAAAgMMQAAEAAByGAAgAAOAwBEAAAACHIQACAAA4DAEQAADAYQiAAAAADkMABAAAcBgCIAAAgMMQAAEAAByGAAgAAOAwBEAAAACHIQACAAA4DAEQAADAYQiAAAAADkMABAAAcBgCIAAAgMMQAAEAAByGAAgAAOAwBEAAAACHIQACAAA4DAEQAADAYQiAAAAADkMABAAAcBgCIAAAgMMQAAEAAByGAAgAAOAwBEAAAACHSTB7AnbW2Niow4cPq0uXLnK5XGZPBwAAGODz%2BfT5558rIyNDcXHOrIURANvg8OHDysrKMnsaAACgFaqqqpSZmWn2NExBAGyDLl26SPK/gZKTk02eDQAAMMLr9SorKyuwH3ciAmAbnDnsm5ycTAAEAMBmnHz6ljMPfAMAADgYARAAAMBhCIAAAAAOQwAEAABwGAIgAACAwxAAAQAAHIYACAAA4DAEQAAAAIchAAIAADiMLQLgm2%2B%2BqZ/85CfKyMiQy%2BXSyy%2B/HPIxmzdv1iWXXCK3263evXtr%2BfLlZ41ZtGiRsrOzlZSUpLy8PG3fvr39J99Kv/mNFBcnud1Sv37Sjh1mzwgAgMjbsUPq21dKTJTi4/37Q7Q/WwTAuro6DRgwQIsWLTI0/qOPPtJVV12lyy%2B/XBUVFZo5c6YmT56s1157LTBm9erVKi4u1rx587Rz504NGDBARUVFOnr0aKSeRlgef1zy%2BaRTp6R9%2B6S8PCkhQXK5pA4dpKQkgiEAwL7OBL2kpOD92w9%2BIL33nnT6tNTYKD3xhNkzjU0un8/nM3sS4XC5XFqzZo1Gjx7d7Jg77rhDf/nLX7R79%2B7AfWPHjtWJEydUWloqScrLy9PgwYP1xD/fWY2NjcrKytKMGTM0Z84cQ3Pxer3yeDyqra1tl7WA//u/pdJS6dAh/3%2BNSkyUcnKkZ56RBg1q8zQAAIiIHTukX/1K%2BvBDf8AzauRIKSPD/99rr237PNp7/21HCWZPIBK2bt2qwsLCoPuKioo0c%2BZMSdKpU6dUXl6ukpKSwM/j4uJUWFiorVu3Nrvd%2Bvp61dfXB/7s9Xrbdd4/%2B1nrHvfNKmFSkvTkk9KECe06NQAAWu2ZZ6Qbb5Tq6/1VvXC9%2Bqr/v0uX%2Bo%2BOoe1scQg4XNXV1UpNTQ26LzU1VV6vV19%2B%2BaU%2B%2BeQTNTQ0NDmmurq62e0uWLBAHo8ncMvKymrXeQ8b1rbHNzZKX3whXX%2B9Pwg%2B80z7zAsAgNZ45hn/uezXXy99%2BWXrwt83tXU/iX%2BJyQAYKSUlJaqtrQ3cqqqq2nX7GzdK8%2Be3z7bq6wmCAABzfDP4nTrVPtucP9%2B/n0T7iMkAmJaWppqamqD7ampqlJycrI4dO6p79%2B6Kj49vckxaWlqz23W73UpOTg66Wd2ZIJidzQUjAIDI2rFD6tWrfYMfIiMmA2B%2Bfr7KysqC7tuwYYPy8/MlSYmJicrNzQ0a09jYqLKyssAYswwcGJntVlZKQ4ZId90Vme0DAJztzjulwYOlgwcjs/1I7R%2BdyhYB8OTJk6qoqFBFRYUkf5uXiooKHfznu6ykpEQTvnHVw4033qh//OMfuv322/Xee%2B/p97//vV544QXdeuutgTHFxcVasmSJVqxYoX379mnatGmqq6vTxIkTo/rcvu3qq6WjR6Vdu6SuXdt32z6fdO%2B9Unq6tHZt%2B24bAOBMa9f69yu//W37bzslRXr3Xf9%2B8eqr23/7TmaLq4B37Nihyy%2B/PPDn4uJiSdL111%2Bv5cuX68iRI4EwKEnnnXee/vKXv%2BjWW2/VY489pszMTD399NMqKioKjBkzZoyOHTumuXPnqrq6WgMHDlRpaelZF4aYoUcP/%2B3IEemrr/zB7auv/CfPVlZKI0ZIbbkAubpaGjXK/6%2B19jrnEADgPHfe2T7BLylJKivzn64UF%2Bf/s8vl/6/b3fbt42y26wNoJWb1Eaqvl2pr/f8i%2BuEPpc8%2Ba/22/uM/pLlz/edsAABgRGWldM890rJlrd%2BGxyP99a9Saqr//6MZ9OgDaJNDwAjmdks9e0oXXuivEp44IT3/fOu2tWyZ/19cS5e25wwBALFq6VL/fqO14e/55/37rZoaqX9///6MKl/0EQBtzu32/8tp7Fh/RXDDhtZtZ/JkQiAAoGVLl/r3F62xYYN/PzV2bPQrfjgbATCG9OghFRb6Dw%2B3plfS5MnSpEn%2B0j4AAGdUVvr3D60Jfxs3%2BvdLhYX%2B/RSsgXMA28Dq5xC8/rp0xRWte%2ByBA5wXCADwh7/s7NY9dtMm6RvXcFqG1fff0UAFMIZdfnnrq4HZ2dKWLe0%2BJQCAjWzZ0rrwd6bqZ8XwBz8CYIxLTvavnbh3r9SlS3iPLSjgcDAAOFVlpX8/EI5zzpH27PHvdxxaWLMNAqBD9O0r/f3v/qaa4cjOJgQCgNO05rBvSopUUSH16xeBCaHdEQAdJCfH3wT6W6vkhcThYABwjtYc9i0r8%2B9fcnIiMiVEAAHQYdxu/4Uhe/eGVw0sKCAEAkCs27IlvMO%2Bycn%2BQ75XXEFbF7shADpU377Sjh3hnRfIOYEAELvCPeevSxdp504O%2BdoVAdDBcnL85wV6PMYfwzmBABB7wj3nLznZv//gkK99EQAdLidHKi8P73AwIRAAYke44c/j8Vf%2BCH/2RgCEcnL8h4O7djX%2BGEIgANhfuOGva1d/0YDwZ38EQEjyf5iPHJGefNL4YwiBAGBf4Ya/J5/07ycIf7GBAIgAt1u6%2BurwzwkEANhPuId9r76aK31jCQEQQTIzwz8nkPYwAGAv4Xxvezz%2B/UJmZuTmg%2BgjAOIsZ84JNBoC6REIAPYRTq%2B/M%2BGPw76xhwCIJrUmBHI%2BIABYWzi9/gh/sY0AiGadCYHnnGNsPBeFAIB1hXPRR%2BfOhL9YRwBEi3JypFdfNT6eEAgA1hPuFb%2BvvUb4i3UEQIRUUCBt2mR8PFcGA4C1hPO9vGmTNHRoxKYCiyAAwpDLLw8vBFIFBABrCOf7eNMm//c9Yh8BEIZdfrn00kvGxnIoGADMF86h35deIvw5CQEQYcnLkzp1MjaWQ8EAYC6j38MdO/q/3%2BEcBECEJTNTevdd493g6Q8IAOYw%2Bv2bmCjt2kWjZ6chACJsOTnS6tXGxtIkGgCiL5xmzy%2B%2ByBW/TkQARKvk5obXJBoAED1Gv3dTUqRLLonoVGBRBEC0SmZmeCuFUAUEgOgw%2Bn3r8fi/xzn060wEQLTamZVCOnYMPZal4gAg8owu9eZ2s9KH0xEA0SY5OdL69cbG0hoGACInnJYvZWWEP6cjAKLNCgqkxYuNjaU1DABEhtHv18WLWekDNguAixYtUnZ2tpKSkpSXl6ft27c3O/bHP/6xXC7XWberrroqMOaGG2446%2BcjRoyIxlOJOVddJSUlGRvL%2BYAA0L6Mfq%2B63f7va8A2AXD16tUqLi7WvHnztHPnTg0YMEBFRUU6evRok%2BP/9Kc/6ciRI4Hb7t27FR8fr5///OdB40aMGBE07vnnn4/G04k5mZnShg3GxnI%2BIAC0H6Pn/Un%2BQ79c9AHJRgHwkUce0ZQpUzRx4kT169dPixcvVqdOnbRs2bImx3fr1k1paWmB24YNG9SpU6ezAqDb7Q4a17Vr12g8nZhUUBDeUnEAgLYLZ6k3Dv3iDFsEwFOnTqm8vFyFhYWB%2B%2BLi4lRYWKitW7ca2sbSpUs1duxYde7cOej%2BzZs3q2fPnrrgggs0bdo0ffrpp81uo76%2BXl6vN%2BiGYHl5xlvDUAUEgLYx%2Bj2aksJSbwhmiwD4ySefqKGhQampqUH3p6amqrq6OuTjt2/frt27d2vy5MlB948YMULPPPOMysrK9MADD%2BiNN97QyJEj1dDQ0OR2FixYII/HE7hlZWW1/knFqDP9ATt0CD2WKiAAtI2R79GEBPr94Wy2CIBttXTpUvXv319DhgwJun/s2LEaNWqU%2Bvfvr9GjR2vdunV65513tHnz5ia3U1JSotra2sCtqqoqCrO3n5wcadMmY2O5IAQAWsfo9%2BfmzbR8wdlsEQC7d%2B%2Bu%2BPh41dTUBN1fU1OjtLS0Fh9bV1enVatWadKkSSH/nvPPP1/du3fX/v37m/y52%2B1WcnJy0A1NKyiQxo41No5DwQAQHqMXfowZw3l/aJotAmBiYqJyc3NVVlYWuK%2BxsVFlZWXKz89v8bEvvvii6uvrdd1114X8ew4dOqRPP/1U6enpbZ4zpOJiY%2BNoEA0AxoXT8HnWrIhOBTZmiwAoScXFxVqyZIlWrFihffv2adq0aaqrq9PEiRMlSRMmTFBJSclZj1u6dKlGjx6t73znO0H3nzx5UrNnz9bbb7%2BtAwcOqKysTNdcc4169%2B6toqKiqDynWDd4MFcFA0B7C%2Beq38GDIzoV2FiC2RMwasyYMTp27Jjmzp2r6upqDRw4UKWlpYELQw4ePKi4uOA8%2B/777%2Butt97S%2BibWKouPj9e7776rFStW6MSJE8rIyNDw4cM1f/58ud3uqDwnJ8jL868V/OWXocdWVkq9ekV%2BTgBgV0aPliQlcdUvWuby%2BXw%2BsydhV16vVx6PR7W1tZwP2IK33pIuu8zYWN6NANA8l8vYuLfe4ty/lrD/ttEhYNhXOA2iORcQAJpm9PuRhs8wggCIqMjLkxITQ4/jXEAAaJqR78fERA79whgCIKIiM1Pau9fYWHoDAkAwo9%2BLe/fS8BnGEAARNTk50rhxocfRGxAA/sVoz79x42j4DOMIgIiqmTONjeNQMAD4Gf0%2BNPr9CkgEQERZOL0BqQICcLpwLvyg5x/CQQBE1J3pDRgKVUAATmfke5Cef2gNAiCiLjNTaqI3d5OoAgJwKqPffxs3cuEHwkcAhCkKCqThw0OPowoIwKmMfP/9%2B7/T8w%2BtQwCEaZYuNTaOKiAApzH6vbdsWWTngdhFAIRpMjONtYXJziYEAnCOykpj1b9x4zj0i9YjAMJUtIUBgGC0fUE0EABhqsGDpZtvNjaWKiCAWGf0e276dNq%2BoG0IgDDd7Nm0hQEAyXjblzvuiPhUEOMIgDBdZqb0/PPGxlIFBBCrjH6/rV7NuX9oOwIgLCE3V%2BrUKfQ4qoAAYpWR77eOHaVLLon4VOAABEBYQmam9O67xsZSBQQQa4x%2Br%2B3aRfUP7YMACMvIyZFGjAg9jioggFhj5HutqMj/PQm0BwIgLGXJEmPjqAICiBVGv8%2Befjqy84CzEABhKeE0hwaAWEDTZ5iBAAjLMdrcdMuWiE4DACLO6PcYTZ/R3giAsByjzaELCjgUDMC%2BKiv932Oh0PQZkUAAhCXNni116BB6HIeCAdiVke%2BvDh1o%2BozIIADCkjIzpRdfNDaWKiAAuzH6vfXSS5z7h8ggAMKycnNZIg5AbDK65BtNnxEpBEBYVmamtH692bMAAHNs3Ej1D5FDAISlGTlBWuIwMAD7MPp9NXRoZOcBZyMAwvIWLgw9hsPAAOzCyPfVY49FfBpwOAIgLG/GDGPj6AsIwOqMfk8ZaYUFtAUBELYwe3boMfQFBGBlRvv%2B3XZb5OcCEABhCzffTF9AAPZmtO/fLbdEfCqAvQLgokWLlJ2draSkJOXl5Wn79u3Njl2%2BfLlcLlfQLSkpKWiMz%2BfT3LlzlZ6ero4dO6qwsFAffPBBpJ8GWoG%2BgADsjL5/sBrbBMDVq1eruLhY8%2BbN086dOzVgwAAVFRXp6NGjzT4mOTlZR44cCdwqv/UJfPDBB7Vw4UItXrxY27ZtU%2BfOnVVUVKSvvvoq0k8HrUBfQAB2Rd8/WI1tAuAjjzyiKVOmaOLEierXr58WL16sTp06admyZc0%2BxuVyKS0tLXBLTU0N/Mzn8%2BnRRx/VnXfeqWuuuUYXXXSRnnnmGR0%2BfFgvv/xyFJ4RwkVfQACxjL5/iCZbBMBTp06pvLxchYWFgfvi4uJUWFiorVu3Nvu4kydPqlevXsrKytI111yjPXv2BH720Ucfqbq6OmibHo9HeXl5zW6zvr5eXq836Ibooi8gALuh7x%2BsyBYB8JNPPlFDQ0NQBU%2BSUlNTVV1d3eRjLrjgAi1btkx//vOf9eyzz6qxsVGXXnqpDh06JEmBx4WzzQULFsjj8QRuWVlZbX1qaAX6AgKwE/r%2BwYpsEQBbIz8/XxMmTNDAgQP1ox/9SH/605/Uo0cP/eEPf2j1NktKSlRbWxu4VVVVteOMYZTRvoBUAQGYzej3EH3/EG22CIDdu3dXfHy8ampqgu6vqalRWlqaoW106NBBF198sfbv3y9JgceFs023263k5OSgG8xhpC8gVUAAZjPyPUTfP5jBFgEwMTFRubm5KisrC9zX2NiosrIy5efnG9pGQ0ODdu3apfT0dEnSeeedp7S0tKBter1ebdu2zfA2YR6j/1pmdRAAZjH6/UPfP5jBFgFQkoqLi7VkyRKtWLFC%2B/bt07Rp01RXV6eJEydKkiZMmKCSkpLA%2BHvuuUfr16/XP/7xD%2B3cuVPXXXedKisrNXnyZEn%2BK4Rnzpype%2B%2B9V6%2B88op27dqlCRMmKCMjQ6NHjzbjKSIMmZnSrbeGHsfqIADMYHTVj5kzufIX5kgwewJGjRkzRseOHdPcuXNVXV2tgQMHqrS0NHARx8GDBxUX9688%2B9lnn2nKlCmqrq5W165dlZubq7/97W/q169fYMztt9%2Buuro6TZ06VSdOnFBBQYFKS0vPahgNayoulp54Qjp9uuVx2dmSzxeVKQGAJOOrfsyaFfGpAE1y%2BXzsGlvL6/XK4/GotraW8wFN8uc/S0YKtgcOSL16RXo2AOCv/hkJgH/%2BszRqVMSngyaw/7bRIWCgKawOAsBqWPUDdkAAhK2xOggAO2LVD5iNAAjbY3UQAFbBqh%2BwCwIgYgKrgwCwAlb9gF0QABETWB0EgNlY9QN2QgBEzGB1EABmYtUP2AkBEDHD6L%2BqqQICaG9Gv1dY9QNWQQBEzDC6OghVQADtzcj3Cqt%2BwEoIgIgpxcXGxlEFBNBejH6fsOoHrIQAiJhCFRBAtFH9gx0RABFzjFYBASBaqP7BagiAiDlG/5XNYWAAbWX0e4TqH6yGAIiYRGNoANFA42fYFQEQMYnG0AAijcbPsDMCIGIWjaEBRBKNn2FnBEDELBpDA4gUGj/D7giAiFm0hAEQKbR%2Bgd0RABHTaAwNoL3R%2BBmxgACImEYVEEB7o/qHWEAARMyjCgigvVD9Q6wgACLmUQUE0F6o/iFWEADhCCwPByBaqP7BDgiAcASWhwPQViz7hlhCAIRjsDwcgLZg2TfEEgIgHIPl4QC0Fsu%2BIdYQAOEoLA8HoDVY9g2xhgAIR2F5OADhYtk3xCICIByFljAAwkXrF8QiAiAch8bQAIyi8TNiFQEQjkMVEIBRVP8QqwiAcCSqgABCofqHWGarALho0SJlZ2crKSlJeXl52r59e7NjlyxZossuu0xdu3ZV165dVVhYeNb4G264QS6XK%2Bg2YsSISD8NWABVQAChUP1DLLNNAFy9erWKi4s1b9487dy5UwMGDFBRUZGOHj3a5PjNmzfrl7/8pV5//XVt3bpVWVlZGj58uD7%2B%2BOOgcSNGjNCRI0cCt%2Beffz4aTwcWwPJwANqK6h/syuXz%2BXxmT8KIvLw8DR48WE888YQkqbGxUVlZWZoxY4bmzJkT8vENDQ3q2rWrnnjiCU2YMEGSvwJ44sQJvfzyy62ak9frlcfjUW1trZKTk1u1DZjL5Qo95sABqVeviE8FgIVUVhqrANpjD4pvY/9tkwrgqVOnVF5ersLCwsB9cXFxKiws1NatWw1t44svvtDp06fVrVu3oPs3b96snj176oILLtC0adP06aefNruN%2Bvp6eb3eoBvsjeXhADSFZd8Q62wRAD/55BM1NDQoNTU16P7U1FRVV1cb2sYdd9yhjIyMoBA5YsQIPfPMMyorK9MDDzygN954QyNHjlRDQ0OT21iwYIE8Hk/glpWV1fonBUtgeTgA38ayb3ACWwTAtrr//vu1atUqrVmzRklJSYH7x44dq1GjRql///4aPXq01q1bp3feeUebN29ucjslJSWqra0N3KqqqqL0DBBJLA8H4JtY9g1OYIsA2L17d8XHx6umpibo/pqaGqWlpbX42Icfflj333%2B/1q9fr4suuqjFseeff766d%2B%2Bu/fv3N/lzt9ut5OTkoBvsj%2BXhAJzBsm9wClsEwMTEROXm5qqsrCxwX2Njo8rKypSfn9/s4x588EHNnz9fpaWlGjRoUMi/59ChQ/r000%2BVnp7eLvOGPdASBsAZtH6BU9giAEpScXGxlixZohUrVmjfvn2aNm2a6urqNHHiREnShAkTVFJSEhj/wAMP6K677tKyZcuUnZ2t6upqVVdX6%2BTJk5KkkydPavbs2Xr77bd14MABlZWV6ZprrlHv3r1VVFRkynOEeWgMDYDGz3AS2wTAMWPG6OGHH9bcuXM1cOBAVVRUqLS0NHBhyMGDB3XkyJHA%2BCeffFKnTp3Sz372M6WnpwduDz/8sCQpPj5e7777rkaNGqXvfe97mjRpknJzc/XXv/5VbrfblOcI81AFBED1D05imz6AVkQfodhy6JBk5MJuPjFAbDLSF7SqigAYC9h/26gCCESa0S91DgMDscfo55rwh1hBAAS%2BgcbQgDPR%2BBlOQwAEvoHG0IDz0PgZTkQABL6FxtCAs9D4GU5EAAS%2BhcbQgHPQ%2BBlORQAEvoWWMIBz0PoFTkUABJpAY2gg9tH4GU5GAASaQBUQiH1U/%2BBkBECgGVQBgdhF9Q9ORwAEmkEVEIhdVP/gdARAoAVGq4AAYg/VP8QyAiDQAv71DzgXn3/EMgIgEEKo5eHmz%2Bc8QMBOKiv9n9uWsOwbYp3L5/P5zJ6EXXm9Xnk8HtXW1io5Odns6SCCXK7QY/gkAfbA5xnsv6kAAu2GKiBgfXxOAT8CIGBAqMPAElcDA3Zg5HPK4V84AQEQMGDGDGPjqC4A1mX082l0PXDAzgiAgEGzZ4ceQxUQsC4jn8/bbov4NABLIAACBhmtClAFBKzH6OfyllsiOw/AKgiAgEGsDALYFyt/AMEIgEAYWB8YsB/W/QXORgAEwkAVELAfqn/A2QiAQJhYHxiIPVT/4DQEQCBMRqsEHAYGzGf0c0j1D05DAARagcbQgD3Q%2BBloGgEQaAUaQwPWR%2BNnoHkEQKCVaAwNWBuNn4HmEQCBVqIxNGBdNH4GWkYABFqJljCAddH6BWgZARBoAxpDA9ZD42cgNAIg0AZUAQHrofoHhGarALho0SJlZ2crKSlJeXl52r59e4vjX3zxRfXp00dJSUnq37%2B//ud//ifo5z6fT3PnzlV6ero6duyowsJCffDBB5F8CohBNIYG7IfqH5zONgFw9erVKi4u1rx587Rz504NGDBARUVFOnr0aJPj//a3v%2BmXv/ylJk2apL///e8aPXq0Ro8erd27dwfGPPjgg1q4cKEWL16sbdu2qXPnzioqKtJXX30VraeFGJCZKU2a1PzP4%2BKkRx%2BN2nQAx3v0Uf/nrjmTJlH9A1w%2Bn89n9iSMyMvL0%2BDBg/XEE09IkhobG5WVlaUZM2Zozpw5Z40fM2aM6urqtG7dusB9P/jBDzRw4EAtXrxYPp9PGRkZmjVrlm77Zx%2BA2tpapaamavny5Ro7dmzIOXm9Xnk8HtXW1io5ObmdninsyOUKPebAAalXr4hPBXC0ykpjh4DtsedDpLD/tkkF8NSpUyovL1dhYWHgvri4OBUWFmrr1q1NPmbr1q1B4yWpqKgoMP6jjz5SdXV10BiPx6O8vLxmt1lfXy%2Bv1xt0AyTp2WdDj%2BE8QCDyjHzOjHxegVhniwD4ySefqKGhQampqUH3p6amqrq6usnHVFdXtzj%2BzH/D2eaCBQvk8XgCt6ysrFY9H8Se8eONjeNqYCByjH6%2BjH5egVhmiwBoFSUlJaqtrQ3cqqqqzJ4SLGT%2B/NBjqAICkWPk82Xkcwo4gS0CYPfu3RUfH6%2Bampqg%2B2tqapSWltbkY9LS0locf%2Ba/4WzT7XYrOTk56AacccMNxsZRBQTan9HPldHPKRDrbBEAExMTlZubq7KyssB9jY2NKisrU35%2BfpOPyc/PDxovSRs2bAiMP%2B%2B885SWlhY0xuv1atu2bc1uE2gJPQEB89D7DwiPLQKgJBUXF2vJkiVasWKF9u3bp2nTpqmurk4TJ06UJE2YMEElJSWB8bfccotKS0v1u9/9Tu%2B9957uvvtu7dixQ9OnT5ckuVwuzZw5U/fee69eeeUV7dq1SxMmTFBGRoZGjx5txlNEDGBlECD6WPkDCF%2BC2RMwasyYMTp27Jjmzp2r6upqDRw4UKWlpYGLOA4ePKi4bzR%2BuvTSS7Vy5Urdeeed%2Bs///E9997vf1csvv6wLL7wwMOb2229XXV2dpk6dqhMnTqigoEClpaVKSkqK%2BvNDbDhTBfx//6/lcdnZtKEA2gvVPyB8tukDaEX0EUJTDh2SjFwgTl9AoO2M9v2rqiIA4l/Yf9voEDBgF5wLCEQP1T%2BgdQiAQASwPjBgHZz7B5yNAAhEgNFqAxeDAK1n9PND9Q84GwEQiJCFC0OP4TAw0HpGPj%2BPPRbxaQC2RAAEImTGDGPjqAIC4TP6ubn55sjOA7ArAiAQQbNnhx5DFRAIn5HPzW23RXwagG0RAIEIMlp9oAoIGGf083LLLZGdB2BnBEAggmgJA7Q/Wr8AbUcABCKMljBA9NH6BWgZARCIsFBVQJdLmj%2Bfw8CAEZWV/s%2BLy9X8GKp/QGgsBdcGLCUDo4wuD8enEWhZS8HvDJZ9Qyjsv6kAAlFBY2ig7Wj8DLQfAiAQJTSGBtqGxs9A%2B%2BEQcBtQQka4jBy%2B4hMJNI3PD9oL%2B28qgIDlcBgYOBufC6B9EQCBKOIwMNA6HP4F2hcBEIgi1gcGwse6v0D7IwACUcb6wEB4WPcXaH8EQCDKWB8YMI51f4HIIAACUcb6wIBxrPsLRAYBEDCB0fWBqQLCyYy%2B/1n3FwgfARAwAVVAIDSqf0DkEAABkxitAgJoHtU/oHUIgIBJWB8YaB7r/gKRRQAETERjaKBpNH4GIosACJiIxtDA2Wj8DEQeARAwGY2hgWA0fgYijwAImIzG0MC/0PgZiA4CIGAyWsIA/0LrFyA6CICABdAYGqDxMxBNBEDAAqgCAlT/gGiyfAA8fvy4xo8fr%2BTkZKWkpGjSpEk6efJki%2BNnzJihCy64QB07dtS5556rm2%2B%2BWbW1tUHjXC7XWbdVq1ZF%2BukAzaIKCCej%2BgdEl%2BUD4Pjx47Vnzx5t2LBB69at05tvvqmpU6c2O/7w4cM6fPiwHn74Ye3evVvLly9XaWmpJk2adNbYP/7xjzpy5EjgNnr06Ag%2BE6BlVAHhZFT/gOhy%2BXw%2Bn9mTaM6%2BffvUr18/vfPOOxo0aJAkqbS0VFdeeaUOHTqkjIwMQ9t58cUXdd1116murk4JCQmS/BXANWvWtCn0eb1eeTwe1dbWKjk5udXbAc44dEjKygo9zrqfWqB1XK7QY6qqCIBoH%2By/LV4B3Lp1q1JSUgLhT5IKCwsVFxenbdu2Gd7OmV/wmfB3xk033aTu3btryJAhWrZsmUJl4fr6enm93qAb0J5YHg5OxLJvQPRZOgBWV1erZ8%2BeQfclJCSoW7duqq6uNrSNTz75RPPnzz/rsPE999yjF154QRs2bNC1116rX//613r88cdb3NaCBQvk8XgCtywjpRogTCwPB6dh2Tcg%2BkwJgHPmzGnyIoxv3t577702/z1er1dXXXWV%2BvXrp7vvvjvoZ3fddZeGDh2qiy%2B%2BWHfccYduv/12PfTQQy1ur6SkRLW1tYFbVVVVm%2BcIfNuMGdI11zT/8/h46dFHozYdIOIefdT/vm7OqFEs%2Bwa0N1POATx27Jg%2B/fTTFsecf/75evbZZzVr1ix99tlngfu//vprJSUl6cUXX9RPf/rTZh//%2Beefq6ioSJ06ddK6deuUlJTU4t/3l7/8RVdffbW%2B%2Buorud1uQ8%2BDcwgQKUbOhzpwQOrVK%2BJTASKqstJYBZDzXtGe2H9LCaGHtL8ePXqoR48eIcfl5%2BfrxIkTKi8vV25uriRp06ZNamxsVF5eXrOP83q9Kioqktvt1iuvvBIy/ElSRUWFunbtajj8AZG0cGHoikd2NjtF2B%2BHfwFzWPoqYEkaOXKkampqtHjxYp0%2BfVoTJ07UoEGDtHLlSknSxx9/rGHDhumZZ57RkCFD5PV6NXz4cH3xxRdas2aNOnfuHNhWjx49FB8fr7Vr16qmpkY/%2BMEPlJSUpA0bNui2227Tbbfdpt/85jeG58a/IBBJVAER66j%2BwSzsv02qAIbjueee0/Tp0zVs2DDFxcXp2muv1cJvnCV/%2BvRpvf/%2B%2B/riiy8kSTt37gxcIdy7d%2B%2BgbX300UfKzs5Whw4dtGjRIt16663y%2BXzq3bu3HnnkEU2ZMiV6TwwIYf586a67Wh5DFRB2ZiT8zZ8f8WkAjmT5CqCV8S8IRJLRnoBUAWFHRqt/9P5DJLD/tngbGMDJWBkEsYyVPwBzEQABC2N9YMQi1v0FzEcABCyMKiBiEdU/wHwEQMDijFYBgVhC9Q%2BILAIgYHGsD4xYwrq/gDUQAAEbYH1gxAoaPwPWQAAEbGDGDGPjqALCyoy%2BP1n3F4g8AiBgE7Nnhx5DFRBWZuT9edttEZ8GABEAAdswWhWhCggrMvq%2BvOWWyM4DgB8BELAJWsLAzmj9AlgLARCwERpDw45o/AxYDwEQsBGqgLAjqn%2BA9RAAAZuhMTRiEdU/ILoIgIDN0BgadkLjZ8CaCICADRltDE0IhJkqK2n8DFiVy%2Bfz%2BcyehF15vV55PB7V1tYqOTnZ7OnAYVwuY%2BP4hMMsvEdhVey/qQACtmWkMbREFRDmMPq%2Bo/EzYA4CIGBTN98sdewYehxXBMMMRt53SUk0fgbMQgAEbCozU3r%2BeWNjqQIimoy%2B31av5uIPwCwEQMDGcnOlTp1Cj6MKiGgy8n7r2FG65JKITwVAMwiAgI1lZkrvvmtsLFVARIPR99muXVT/ADMRAAGby8lhdRBYh9FVP3JyIj0TAC0hAAIxgNVBYCes%2BgGYjwAIxABWB4EVsOoHYB8EQCBGGF0dBIgUVv0A7IMACMSIGTOMjaMKiEgw%2Br66%2BebIzgOAMQRAIIYYWR2EKiAiwcj7ilU/AOsgAAIxxGh1hSog2pPR9xOrfgDWQQAEYkhmJi1hEH1GW79w8QdgHQRAIMYYbQlDFRDtwej7iNYvgLUQAIEYQxUQ0UT1D7AnywfA48ePa/z48UpOTlZKSoomTZqkkydPtviYH//4x3K5XEG3G2%2B8MWjMwYMHddVVV6lTp07q2bOnZs%2Bera%2B//jqSTwWIGhpDw0qo/gHWk2D2BEIZP368jhw5og0bNuj06dOaOHGipk6dqpUrV7b4uClTpuiee%2B4J/LlTp06B/29oaNBVV12ltLQ0/e1vf9ORI0c0YcIEdejQQffdd1/EngsQLUarLVu2SEOHRnYuiF1bthgbR/UPsB5LVwD37dun0tJSPf3008rLy1NBQYEef/xxrVq1SocPH27xsZ06dVJaWlrglpycHPjZ%2BvXrtXfvXj377LMaOHCgRo4cqfnz52vRokU6depUpJ8WEBVGGkMXFHAuIFqnstL//gmFxs%2BANVk6AG7dulUpKSkaNGhQ4L7CwkLFxcVp27ZtLT72ueeeU/fu3XXhhReqpKREX3zxRdB2%2B/fvr9TU1MB9RUVF8nq92rNnT7PbrK%2Bvl9frDboBVjVjhpSfH3oc5wKiNYy8b/LzafwMWJWlA2B1dbV69uwZdF9CQoK6deum6urqZh83btw4Pfvss3r99ddVUlKi//qv/9J1110XtN1vhj9JgT%2B3tN0FCxbI4/EEbllZWa15WkDU3HWXsXFUAREOo%2B8Xo%2B8/ANFnyjmAc%2BbM0QMPPNDimH379rV6%2B1OnTg38f//%2B/ZWenq5hw4bpww8/VE5OTqu3W1JSouJvnF3v9XoJgbC0/v2ljh2lL79seVx2tuTzRWVKiAFGqn9JSf73HwBrMiUAzpo1SzfccEOLY84//3ylpaXp6NGjQfd//fXXOn78uNLS0gz/fXl5eZKk/fv3KycnR2lpadq%2BfXvQmJqaGklqcbtut1tut9vw3wuYLTNTWr9euuyy0GMrK6VevSI/J9ib0erfxo1c/AFYmSkBsEePHurRo0fIcfn5%2BTpx4oTKy8uVm5srSdq0aZMaGxsDoc6IiooKSVJ6enpgu7/97W919OjRwCHmDRs2KDk5Wf369Qvz2QDWVlDgPw8r1EUhVAFhhJHq3/TpXF0OWJ2lzwHs27evRowYoSlTpmj79u3asmWLpk%2BfrrFjxyojI0OS9PHHH6tPnz6Bit6HH36o%2BfPnq7y8XAcOHNArr7yiCRMm6Ic//KEuuugiSdLw4cPVr18//epXv9L//u//6rXXXtOdd96pm266iQofYtLs2cbGcS4gWmL0/XHHHZGdB4C2s3QAlPxX8/bp00fDhg3TlVdeqYKCAj311FOBn58%2BfVrvv/9%2B4CrfxMREbdy4UcOHD1efPn00a9YsXXvttVq7dm3gMfHx8Vq3bp3i4%2BOVn5%2Bv6667ThMmTAjqGwjEElYHQXtg1Q8gdrh8Pg76tJbX65XH41FtbW1Qn0HAig4dkoxcs3TgAOcC4myVlcYCYFUVARDWx/7bBhVAAO3D6E6ZKiCaYvR9QfgD7IEACDiIkdVBJM4FRDCj7wdW/QDsgwAIOMiMGdK4caHHUQXENxl5P4wbx6ofgJ0QAAGH%2BcaiOC2iCgjJ%2BPvA6PsKgDUQAAGH6d9f6tQp9DiqgJCMvQ86dmTVD8BuCICAw2RmSu%2B%2Ba2wsVUBnM/r737WLiz8AuyEAAg6Uk2O8LyAh0JmMtn2ZOdP/fgJgL/QBbAP6CMHOjPYFlFgizolcLmPj6PsHO2L/TQUQcCyjq4MAzWHVD8C%2BCICAgxUXGxvHYWBnMfr7njUrsvMAEDkEQMDBWCMYTWHNXyD2EQABhzNaBdyyJbLzgDUY/T1T/QPsjQAIOJzRKmBBAYeCY11lpf/3HArVP8D%2BCIAAVFwsdegQehyHgmObkd9vhw5U/4BYQAAEoMxM6cUXjY2lChibjP5eX3qJ6h8QCwiAACRJubn%2BJb1CoQoYm4z8XpOSpEsuifhUAEQBARCAJH9VZ/16Y2OpAsYWo7/PjRup/gGxgpVA2oBO4ohFRleA4JsjdvA7h9Ow/6YCCOBbFi40No4qYGww%2Bnt87LHIzgNAdBEAAQSZMUMaNy70OM4FjA1Gfo/jxkk33xzxqQCIIgIggLNcd52xcTSHtjejvz%2Bj7wcA9kEABHCW/v2lTp1Cj6M5tH0ZbfrcsaP//QAgthAAAZwlM1N6912aQ8cyI7%2B3hARp1y6u/AViEQEQQJNycow3h%2BZQsL0Y/X3993/73wcAYg8BEECzjDaHNnIoEdZh5PdF02cgthEAATSL5tCxh6bPACQCIIAQCgqMtQDJziYEWl1lpbFz/6ZPl4YOjfh0AJiIlUDagE7icIpDh6SsLGNj%2BUaxLqMrflRVUf1DbGP/TQUQgAGZmdLkycbGUgW0JqO/l8mTCX%2BAExAAARgyb57/woBQOBRsPUYP/brd/t8zgNhHAARgSGamtGqVsbH0BrQWo7%2BPF16g%2Bgc4heUD4PHjxzV%2B/HglJycrJSVFkyZN0smTJ5sdf%2BDAAblcriZvL36jqVlTP19ldO8GOFRurrEVQiSqgFZh9PfQsSNtXwAnsfxFICNHjtSRI0f0hz/8QadPn9bEiRM1ePBgrVy5ssnxDQ0NOnbsWNB9Tz31lB566CEdOXJE55xzjiR/APzjH/%2BoESNGBMalpKQoycgxrn/iJFI40Ycf%2BpcG%2B/LL0GOt/e3iDEYu/HC7pT17aPoM52D/LSWYPYGW7Nu3T6WlpXrnnXc0aNAgSdLjjz%2BuK6%2B8Ug8//LAyMjLOekx8fLzS0tKC7luzZo1%2B8YtfBMLfGSkpKWeNBdCynBzp%2Beel0aNDj62slHr1iviU0Ayj1b8XXiD8AU5j6UPAW7duVUpKSiD8SVJhYaHi4uK0bds2Q9soLy9XRUWFJk2adNbPbrrpJnXv3l1DhgzRsmXLFKoYWl9fL6/XG3QDnCg3V0pMDD2OC0LMY/TCj8REDv0CTmTpCmB1dbV69uwZdF9CQoK6deum6upqQ9tYunSp%2Bvbtq0svvTTo/nvuuUdXXHGFOnXqpPXr1%2BvXv/61Tp48qZtb6Hi7YMEC/eY3vwn/iQAxJjNT2rtX6t079NjsbA4Fm8HohR9793LhB%2BBEplQA58yZ0%2ByFGmdu7733Xpv/ni%2B//FIrV65ssvp31113aejQobr44ot1xx136Pbbb9dDDz3U4vZKSkpUW1sbuFVVVbV5joBd5eRI48YZG7tlS2TngmBGX%2B9x4zj0CziVKRXAWbNm6YYbbmhxzPnnn6%2B0tDQdPXo06P6vv/5ax48fN3Tu3ksvvaQvvvhCEyZMCDk2Ly9P8%2BfPV319vdxud5Nj3G53sz8DnGjmTKmZ67GCFBRIBw5wPmA0VFb6X28jZs6M6FQAWJgpAbBHjx7q0aNHyHH5%2Bfk6ceKEysvLlZubK0natGmTGhsblZeXF/LxS5cu1ahRowz9XRUVFeratSsBDwjD4MHSSy9JP/tZ6LEcCo4Oo4d%2BX3rJ//sD4EyWvgikb9%2B%2BGjFihKZMmaLt27dry5Ytmj59usaOHRu4Avjjjz9Wnz59tH379qDH7t%2B/X2%2B%2B%2BaYmN7F%2B1dq1a/X0009r9%2B7d2r9/v5588kndd999mjFjRlSeFxBL8vKklBRjY7kgJLKMvr4pKf7fGwDnsvRFIJL03HPPafr06Ro2bJji4uJ07bXXauHChYGfnz59Wu%2B//76%2B%2BOKLoMctW7ZMmZmZGj58%2BFnb7NChgxYtWqRbb71VPp9PvXv31iOPPKIpU6ZE/PkAsSYzU9qxQ%2BrbVzp9uuWx2dkcCo4Uo1f9JiT4f19c%2BAE4m%2BUbQVsZjSSBf3nrLemyy4yN5Vun/Rlp%2BCz5f09Dh0Z2LoDVsf%2B2%2BCFgAPZRUCCNHWtsLFcFty%2Bjr%2BeYMYQ/AH4EQADtprjY2LiCAs4HbC/hXPU7a1Zk5wLAPgiAANrNmauCjWCVkLYzet6fxFW/AIIRAAG0q3CuCjYaXtA0o68fV/0C%2BDYCIIB2deaq4I4djY2nCtg6Rl83t5urfgGcjQAIoN3l5Ejr1xsby6Hg8IVz6LesjOXeAJyNAAggIgoKOB8wEsI974%2BrfgE0hQAIIGLy8vyHII0gBIYWTvhzuznvD0DzCIAAIiYzU9q40fh4LgppWTivT1kZ5/0BaB4BEEBEhXMoWKJJdHPCeV049AsgFAIggIgLpzUMTaLPFk6zZ1q%2BADCCAAgg4s60hgmnPyAh0C%2Bc8/48Hlq%2BADCGAAggKnJy/OGkUydj4wmB4YW/pCSpvJyWLwCMIQACiJqcHOndd7ky2Ihwwl%2BHDtLu3YQ/AMYRAAFEVU6OtGiR8fFOvTI4nOe9eDHhD0B4CIAAoq6oyH%2B%2BmlFOuzI4nOfr8UjDh0duLgBiEwEQQNRlZvrPVwvnyuClSyM6JctYutT4Fb8ej/915KIPAOEiAAIwxZmLQoyGwMmTY78SuGWL/3kacSb8cegXQGsQAAGY5kwIPOccY%2BPPVAJj7cKQykpp2TLjlb/OnQl/ANomwewJAHC2nBzp1Velyy4zNv5Mhczni9ycoi3cC11ee43wB6BtqAACMF1BgbRpU3iPiZVzAsN9Hps2scwbgLYjAAKwhMsvDy8ETp4s3XWXfQ8HV1b652/0nD/J//pcfnnk5gTAOVw%2BXywdSIkur9crj8ej2tpaJScnmz0dICa8/rp0xRXhPebAAalXr4hMJyLCafJ8BuEPaD/sv6kAArCYcCuBkj9MrV0bkem0u7VrCX8AzEcABGA5rQmBo0b5D6la2Z13%2BucZDsIfgEggAAKwpNaEwHvvldLTrVcNXLvWP6/f/ja8xxH%2BAEQKARCAZbUmBFZX%2B6ts2dn%2BHoNm2rHDf27iqFH%2BeYWD8AcgkgiAACzt8sulvXuNN4s%2Bo7JSGjxYuvXWyMwrlFtv9f/9Bw%2BG97hOnaQ9ewh/ACKLAAjA8vr29TeLbo1HH5XcbumRR9p1Ss165BEpMdH/97bG%2BvVSv37tOiUAOAsBEIAtFBT4K4Fdu4b/2FOnpFmzJJdLOu%2B89j80vGOH/5Czy%2BX/e06fDn8bKSn%2Byh9NngFEAwEQgG307SsdOSKVlbV%2BGwcOSEOG%2BKt0SUn%2Balu4gXDHDv9ckpL82xkypG0NqcvK/OcIUvkDEC2WD4C//e1vdemll6pTp05KSUkx9Bifz6e5c%2BcqPT1dHTt2VGFhoT744IOgMcePH9f48eOVnJyslJQUTZo0SSdPnozAMwDQntxuf6PovXulLl1atw2fz1%2Blq6%2BX9u2T8vL8QS4xUUpI8FfyOnRo%2Bs%2BJif7x773nf/zp061fl/icc/xVvyuu8D8vAIgWywfAU6dO6ec//7mmTZtm%2BDEPPvigFi5cqMWLF2vbtm3q3LmzioqK9NVXXwXGjB8/Xnv27NGGDRu0bt06vfnmm5o6dWokngKACOjbV/r73/2HTtuqsdEf5E6flhoa/Pd9/XXTfz592j%2B%2BrVJSpIoKqn4AzGGbpeCWL1%2BumTNn6sSJEy2O8/l8ysjI0KxZs3TbbbdJkmpra5Wamqrly5dr7Nix2rdvn/r166d33nlHgwYNkiSVlpbqyiuv1KFDh5SRkWFoTiwlA5ivvl768EP/OYKffWb2bEJLSZHeekvq3ZuqH2AW9t82qACG66OPPlJ1dbUKCwsD93k8HuXl5Wnr1q2SpK1btyolJSUQ/iSpsLBQcXFx2rZtW7Pbrq%2Bvl9frDboBMJfb7a%2BiHTniP5zq8Zg9o6Z16SLt3u0/1%2B/73yf8ATBXzAXA6n92W01NTQ26PzU1NfCz6upq9ezZM%2BjnCQkJ6tatW2BMUxYsWCCPxxO4ZWVltfPsAbTWmSBYUyOVlpo9m2CvviodO0bwA2AdpgTAOXPmyOVytXh77733zJhai0pKSlRbWxu4VVVVmT0lAN/idktFRVJtrbRxo7lz2bjRP48RIwh%2BAKwlwYy/dNasWbrhhhtaHHP%2B%2Bee3attpaWmSpJqaGqWnpwfur6mp0cCBAwNjjh49GvS4r7/%2BWsePHw88vilut1tuvsUBW0hOloYN8wewDz/0/380zhH0ePzLuPXu7Z8DAFiRKQGwR48e6tGjR0S2fd555yktLU1lZWWBwOf1erVt27bAlcT5%2Bfk6ceKEysvLlZubK0natGmTGhsblZeXF5F5ATBHcrJ08cX%2BcwS/%2BsrfsmXHDunf/739/o4NG6RBg/ztYpKSqPYBsD5TAmA4Dh48qOPHj%2BvgwYNqaGhQRUWFJKl3794655%2BLg/bp00cLFizQT3/6U7lcLs2cOVP33nuvvvvd7%2Bq8887TXXfdpYyMDI0ePVqS1LdvX40YMUJTpkzR4sWLdfr0aU2fPl1jx441fAUwAHtxu/8VzAoL/ZXBM%2B1cGhslr9d/RXFioj/I%2BXzSyZP%2BXn1n/nzqlH8byclS3D9PoImLo9IHwH4sHwDnzp2rFStWBP588cUXS5Jef/11/fjHP5Ykvf/%2B%2B6qtrQ2Muf3221VXV6epU6fqxIkTKigoUGlpqZKSkgJjnnvuOU2fPl3Dhg1TXFycrr32Wi1cuDA6TwqA6b4d2rp1M2ceAGAG2/QBtCL6CAEAYD/sv2OwDQwAAABaRgAEAABwGAIgAACAwxAAAQAAHIYACAAA4DAEQAAAAIchAAIAADgMARAAAMBhCIAAAAAOY/ml4KzszCIqXq/X5JkAAACjzuy3nbwYGgGwDT7//HNJUlZWlskzAQAA4fr888/l8XjMnoYpWAu4DRobG3X48GF16dJFLperXbft9XqVlZWlqqoqx65T2Bxem5bx%2BrSM16dlvD7N47VpmZ1eH5/Pp88//1wZGRmKi3Pm2XBUANsgLi5OmZmZEf07kpOTLf9BMguvTct4fVrG69MyXp/m8dq0zC6vj1Mrf2c4M/YCAAA4GAEQAADAYQiAFuV2uzVv3jy53W6zp2I5vDYt4/VpGa9Py3h9msdr0zJeH3vhIhAAAACHoQIIAADgMARAAAAAhyEAAgAAOAwBEAAAwGEIgBa0aNEiZWdnKykpSXl5edq%2BfbvZU7KEN998Uz/5yU%2BUkZEhl8ull19%2B2ewpWcqCBQs0ePBgdenSRT179tTo0aP1/vvvmz0ty3jyySd10UUXBZrU5ufn69VXXzV7WpZ0//33y%2BVyaebMmWZPxRLuvvtuuVyuoFufPn3MnpalfPzxx7ruuuv0ne98Rx07dlT//v21Y8cOs6eFFhAALWb16tUqLi7WvHnztHPnTg0YMEBFRUU6evSo2VMzXV1dnQYMGKBFixaZPRVLeuONN3TTTTfp7bff1oYNG3T69GkNHz5cdXV1Zk/NEjIzM3X//fervLxcO3bs0BVXXKFrrrlGe/bsMXtqlvLOO%2B/oD3/4gy666CKzp2Ip3//%2B93XkyJHA7a233jJ7Spbx2WefaejQoerQoYNeffVV7d27V7/73e/UtWtXs6eGFtAGxmLy8vI0ePBgPfHEE5L86w1nZWVpxowZmjNnjsmzsw6Xy6U1a9Zo9OjRZk/Fso4dO6aePXvqjTfe0A9/%2BEOzp2NJ3bp100MPPaRJkyaZPRVLOHnypC655BL9/ve/17333quBAwfq0UcfNXtaprv77rv18ssvq6KiwuypWNKcOXO0ZcsW/fWvfzV7KggDFUALOXXqlMrLy1VYWBi4Ly4uToWFhdq6dauJM4Md1dbWSvKHHARraGjQqlWrVFdXp/z8fLOnYxk33XSTrrrqqqDvIPh98MEHysjI0Pnnn6/x48fr4MGDZk/JMl555RUNGjRIP//5z9WzZ09dfPHFWrJkidnTQggEQAv55JNP1NDQoNTU1KD7U1NTVV1dbdKsYEeNjY2aOXOmhg4dqgsvvNDs6VjGrl27dM4558jtduvGG2/UmjVr1K9fP7OnZQmrVq3Szp07tWDBArOnYjl5eXlavny5SktL9eSTT%2Bqjjz7SZZddps8//9zsqVnCP/7xDz355JP67ne/q9dee03Tpk3TzTffrBUrVpg9NbQgwewJAGh/N910k3bv3s15St9ywQUXqKKiQrW1tXrppZd0/fXX64033nB8CKyqqtItt9yiDRs2KCkpyezpWM7IkSMD/3/RRRcpLy9PvXr10gsvvMDpA/L/g3PQoEG67777JEkXX3yxdu/ercWLF%2Bv66683eXZoDhVAC%2Bnevbvi4%2BNVU1MTdH9NTY3S0tJMmhXsZvr06Vq3bp1ef/11ZWZmmj0dS0lMTFTv3r2Vm5urBQsWaMCAAXrsscfMnpbpysvLdfToUV1yySVKSEhQQkKC3njjDS1cuFAJCQlqaGgwe4qWkpKSou9973vav3%2B/2VOxhPT09LP%2BEdW3b18Ok1scAdBCEhMTlZubq7KyssB9jY2NKisr4zwlhOTz%2BTR9%2BnStWbNGmzZt0nnnnWf2lCyvsbFR9fX1Zk/DdMOGDdOuXbtUUVERuA0aNEjjx49XRUWF4uPjzZ6ipZw8eVIffvih0tPTzZ6KJQwdOvSsllP/93//p169epk0IxjBIWCLKS4u1vXXX69BgwZpyJAhevTRR1VXV6eJEyeaPTXTnTx5Muhf3B999JEqKirUrVs3nXvuuSbOzBpuuukmrVy5Un/%2B85/VpUuXwHmjHo9HHTt2NHl25ispKdHIkSN17rnn6vPPP9fKlSu1efNmvfbaa2ZPzXRdunQ561zRzp076zvf%2BQ7nkEq67bbb9JOf/ES9evXS4cOHNW/ePMXHx%2BuXv/yl2VOzhFtvvVWXXnqp7rvvPv3iF7/Q9u3b9dRTT%2Bmpp54ye2poiQ%2BW8/jjj/vOPfdcX2Jiom/IkCG%2Bt99%2B2%2BwpWcLrr7/uk3TW7frrrzd7apbQ1GsjyffHP/7R7KlZwn/8x3/4evXq5UtMTPT16NHDN2zYMN/69evNnpZl/ehHP/LdcsstZk/DEsaMGeNLT0/3JSYm%2Bv7t3/7NN2bMGN/%2B/fvNnpalrF271nfhhRf63G63r0%2BfPr6nnnrK7CkhBPoAAgAAOAznAAIAADgMARAAAMBhCIAAAAAOQwAEAABwGAIgAACAwxAAAQAAHIYACAAA4DAEQAAAAIchAAIAADgMARAAAMBhCIAAAAAOQwAEAABwGAIgAACAwxAAAQAAHIYACAAA4DAEQAAAAIchAAIAADgMARAAAMBhCIAAAAAOQwAEAABwGAIgAACAwxAAAQAAHIYACAAA4DAEQAAAAIchAAIAADgMARAAAMBhCIAAAAAOQwAEAABwGAIgAACAwxAAAQAAHIYACAAA4DD/H0%2BW6ILRtfviAAAAAElFTkSuQmCC"

# import pyaudio as pa

# RATE = 16_000
# CHANNELS = 1
# CHUNK = 16_000  # determined by the javascript code on front-end
# FORMAT = pa.paInt16
# p = pa.PyAudio()

# stream_parser = p.open(
#     rate=RATE, channels=CHANNELS, format=FORMAT, frames_per_buffer=CHUNK, output=True
# )
from pyogg import OpusDecoder
import pyogg


class KWSConsumer(AsyncWebsocketConsumer):

    async def connect(self):
        await self.accept()

    async def receive(self, bytes_data):
        # https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Audio_codecs#opus
        # print("raw_btyes: ", bytes_data)
        odecoder = OpusDecoder()
        # odecoder.set_channels(1)
        # odecoder.set_sampling_frequency(16_000)
        # print(dir(odecoder))
        try:
            print("Decoded bytes: ", odecoder.decode(bytes_data))
        except pyogg.pyogg_error.PyOggError:
            print("Corrupted stream apparently")
            pass
        # data = stream_parser.read(bytes_data)
        # print("Array: ", array)
        # print(f"pyaudio data: {data}")
        # sample = np.frombuffer(bytes_data, dtype=np.float32)  # np.int16)
        print(f"len of bytes: {len(bytes_data)}")
        # print("np array: ", sample.shape)

        # self.send(bytes_data)

        self.send(text_data=BLUE_PLOT_B64)

    async def get_spot_result(self, data):
        # data better be base64 encoded
        print(f"get_spot_result(data) ->  data: {data}")
        result = requests.post(URL_KWS_SERIVCE, data=data)
        print("result.status_code: ", result.status_code)
        print("result: ", result)
        return result

    # {
    #         "keyword_probability": ww_prob,
    #         "prediction": 1.0 if ww_prob > CONFIG["DECISION_THRESHOLD"] else 0.0,
    #         "false_alarm_probability": 1 - ww_prob,
    #         "decision_threshold": CONFIG["DECISION_THRESHOLD"],
    #         "wwvm_version": CONFIG["MODEL_VERSION"],
    #         "inference_time": f - s,
    #     }

    async def spot(self, data):
        print(f"spot data: {data}")
        result = await self.get_spot_result(data)
        print("results from spot(): ", result)
        if "channel" in data:
            spot_result = data["channel"]["alternatives"][0]["spot"]

            if spot_result:
                await self.send(spot_result)

    async def response(self, data=None):
        """
        function responds to received audio stream via producing a plot of
        of the predicted values
        """
        pass
